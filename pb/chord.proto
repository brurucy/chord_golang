syntax = "proto3";

package pb;
import "google/protobuf/empty.proto";

option go_package = "chord_golang/pb";

service Chord {

  rpc Ping (google.protobuf.Empty) returns (PingResponse) {}
  rpc SetSucc (Node) returns (google.protobuf.Empty) {}
  rpc SetSuccSucc (Node) returns (google.protobuf.Empty) {}
  rpc FindSuccessor(FindSuccessorRequest) returns (Node) {}
  rpc FindPredecessor(FindPredecessorRequest) returns (Node) {}
  rpc Join (Node) returns (google.protobuf.Empty) {}
  rpc Stabilize (google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc StabilizeAll (google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc ClosestNodeTo (ClosestNodeToRequest) returns (Node) {}
  rpc AddShortcut (Node) returns (google.protobuf.Empty) {}
  rpc Lookup (LookupRequest) returns (LookupResponse) {}
  rpc Leave (google.protobuf.Empty) returns (google.protobuf.Empty) {}

}

message LookupRequest {
  int32 id = 1;
  int32 hops = 2;
}

message LookupResponse {
  Node node = 1;
  int32 hops = 2;
}

message FindSuccessorRequest {
  int32 id = 1;
}

message FindPredecessorRequest {
  int32 id = 1;
}

message ClosestNodeToRequest {
  int32 id = 1;
}

message Node {
  int32 id = 1;
  string address = 2;
}

message PingResponse {
  bool alive = 1;
}
